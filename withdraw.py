from gc import callbacks
from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from db import DB_PATH
import aiosqlite
import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()

class WithdrawState(StatesGroup):
    awaiting_amount = State()
    awaiting_confirmation = State()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MIN_WITHDRAW = 100
MAX_WITHDRAW = 100000
COMMISSION_PERCENT = 1

@router.message(lambda msg: msg.text == "–í—ã–≤–µ—Å—Ç–∏")
async def withdraw_menu(message: types.Message):
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üí∏ USDT", callback_data="withdraw_usdt")],
        [types.InlineKeyboardButton(text="üîµ TON", callback_data="withdraw_ton")],
        [types.InlineKeyboardButton(text="üè¶ –ö–∞—Ä—Ç–∞", callback_data="withdraw_card")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞:", reply_markup=kb)

@router.callback_query(lambda c: c.data.startswith("withdraw_"))
async def handle_withdraw_method(callback: types.CallbackQuery):
    method = callback.data.split("_")[1]
    await callback.message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ {method.upper()} (–æ—Ç {MIN_WITHDRAW} –¥–æ {MAX_WITHDRAW}):"
    )
    await callback.answer()
    await FSMContext.set_state(WithdrawState.awaiting_amount)

@router.message(WithdrawState.awaiting_amount)
async def process_withdraw_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        if not MIN_WITHDRAW <= amount <= MAX_WITHDRAW:
            raise ValueError
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏–º–µ—Ä)
        user_balance = await check_user_balance(message.from_user.id)
        if amount > user_balance:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
        
        commission = amount * (COMMISSION_PERCENT / 100)
        total = amount + commission
        
        await message.answer(
            f"–í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ {amount:.2f}?\n"
            f"–ö–æ–º–∏—Å—Å–∏—è: {commission:.2f}\n"
            f"–ò—Ç–æ–≥–æ: {total:.2f}"
        )
        await state.update_data(amount=amount, method=callbacks.data.split('_')[1])
        await state.set_state(WithdrawState.awaiting_confirmation)
        
    except ValueError as e:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞")
        logger.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≤–æ–¥–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–¥–∞

@router.message(WithdrawState.awaiting_confirmation)
async def confirm_withdraw(message: types.Message, state: FSMContext):
    if message.text.lower() in ["–¥–∞", "yes"]:
        data = await state.get_data()
        amount = data['amount']
        method = data['method']
        
        try:
            async with aiosqlite.connect(DB_PATH) as db:
                await db.execute(
                    "INSERT INTO withdrawals (user_id, amount, method, status, created_at) "
                    "VALUES (?, ?, ?, ?, ?)",
                    (
                        message.from_user.id,
                        amount,
                        method,
                        "pending",
                        datetime.datetime.now()
                    )
                )
                await db.commit()
                
            await update_user_balance(message.from_user.id, -amount)
            await message.answer(f"–í—ã–≤–æ–¥ {amount:.2f} —á–µ—Ä–µ–∑ {method.upper()} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –≤—ã–≤–æ–¥–∞")
            
    else:
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
@router.message(lambda msg: msg.text.lower() in ["–æ—Ç–º–µ–Ω–∞", "cancel"])
async def cancel_withdraw(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def check_user_balance(user_id):
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,)) as cursor:
            row = await cursor.fetchone()
            return row[0] if row else 0

async def update_user_balance(user_id, amount):
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "UPDATE users SET balance = balance + ? WHERE user_id = ?",
            (amount, user_id)
        )
        await db.commit()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–≤–æ–¥–æ–≤
@router.message(lambda msg: msg.text == "–ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤")
async def show_withdraw_history(message: types.Message):
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            async with db.execute(
                "SELECT amount, method, status, created_at FROM withdrawals "
                "WHERE user_id = ? ORDER BY created_at DESC",
                (message.from_user.id,)
            ) as cursor:
                rows = await cursor.fetchall()
                
                if not rows:
                    await message.answer("–ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤ –ø—É—Å—Ç–∞")
                    return
                    
                history_text = "–ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤:\n"
                for row in rows:
                    history_text += f"–°—É–º–º–∞: {row[0]}\n" \
                                   f"–ú–µ—Ç–æ–¥: {row[1].upper()}\n" \
                                   f"–°—Ç–∞—Ç—É—Å: {row[2]}\n" \
                                   f"–î–∞—Ç–∞: {row[3]}\n\n"
                
                await message.answer(history_text)
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏")
