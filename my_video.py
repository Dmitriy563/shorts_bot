from aiogram import Router, types, F
import aiosqlite
from db import DB_PATH
import urllib.parse
import logging

logger = logging.getLogger(__name__)

router = Router()

def escape_md(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã MarkdownV2."""
    escape_chars = r"\_*()~`>#+-=|{}.!"
    return ''.join(f"\\{c}" if c in escape_chars else c for c in str(text))

def escape_md_url(url: str) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è MarkdownV2 (—ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —á–∞—Å—Ç–∏)"""
    if not url.startswith("http"):
        url = f"https://youtu.be/{url}"
    return urllib.parse.quote(url, safe=':/?&=#')

@router.message(F.text == "üìä–ú–æ–∏ –≤–∏–¥–µ–æ")
async def get_my_videos(message: types.Message):
    user_id = message.from_user.id
    
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute(
                "SELECT video_id, link, status, cpm, added_at FROM videos WHERE user_id = ? ORDER BY added_at DESC LIMIT 10",
                (user_id,)
            )
            videos = await cursor.fetchall()
            
            if not videos:
                await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ.")
                return
                
            response = f"{escape_md('–í–∞—à–∏ –≤–∏–¥–µ–æ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):')}\n\n"
            
            for video_id, link, status, cpm, added_at in videos:
                video_url = escape_md_url(link or video_id)
                estimated_views = 1000  # –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º
                estimated_income = (cpm * estimated_views) / 1000 if cpm else 0
                
                response += (
                    f"[–°—Å—ã–ª–∫–∞]({video_url})\n"
                    f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {escape_md(added_at)}\n"
                    f"–°—Ç–∞—Ç—É—Å: {escape_md(status)}\n"
                    f"CPM: {escape_md(cpm)}‚ÇΩ | –î–æ—Ö–æ–¥: {escape_md(f'{estimated_income:.2f}')}‚ÇΩ\n"
                    f"/—É–¥–∞–ª–∏—Ç—å {escape_md(video_id)}\n\n"
                )
            
            await message.answer(response, parse_mode="MarkdownV2", disable_web_page_preview=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ.")

@router.message(F.text.regexp(r"^/—É–¥–∞–ª–∏—Ç—å\s+[\w\-]{11}$"))
async def delete_video(message: types.Message):
    user_id = message.from_user.id
    parts = message.text.strip().split(maxsplit=1)
    
    if len(parts) != 2:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /—É–¥–∞–ª–∏—Ç—å VIDEO_ID")
        return
    
    video_id = parts[1]
    
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute(
                "DELETE FROM videos WHERE user_id = ? AND video_id = ?", (user_id, video_id)
            )
            await db.commit()
            
            if cursor.rowcount == 0:
                await message.answer(
                    f"–í–∏–¥–µ–æ —Å ID {escape_md(video_id)} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —É –≤–∞—Å.",
                    parse_mode="MarkdownV2"
                )
                return
                
        await message.answer(
            f"–í–∏–¥–µ–æ {escape_md(video_id)} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.",
            parse_mode="MarkdownV2"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ.")

__all__ = ["router"]