from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from db import DB_PATH
import aiosqlite
from config import ADMIN_IDS
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()

# --- FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
class AdminStates(StatesGroup):
    waiting_user_id = State()
    waiting_balance = State()
    waiting_message = State()
    waiting_withdrawal_comment = State()
    waiting_broadcast_content = State()
    waiting_broadcast_confirm = State()

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞ ---
def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def main_admin_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_search_user")],
        [InlineKeyboardButton(text="–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥", callback_data="admin_withdrawals")],
        [InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
    ])

def user_profile_kb(user_id: int, banned: bool):
    buttons = [
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"change_balance:{user_id}")],
        [InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"send_message:{user_id}")],
        [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ", callback_data=f"user_videos:{user_id}")],
        [InlineKeyboardButton(text="–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥", callback_data=f"user_withdrawals:{user_id}")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_back_main")]
    ]
    if banned:
        buttons.insert(2, [InlineKeyboardButton(text="–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"unban_user:{user_id}")])
    else:
        buttons.insert(2, [InlineKeyboardButton(text="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"ban_user:{user_id}")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def videos_list_kb(videos: list, user_id: int):
    kb = InlineKeyboardMarkup(row_width=2)
    for vid in videos:
        kb.insert(InlineKeyboardButton(text=f"–£–¥–∞–ª–∏—Ç—å {vid[0]}", callback_data=f"del_video:{vid[0]}:{user_id}"))
        kb.insert(InlineKeyboardButton(text=f"–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å {vid[0]}", callback_data=f"deactivate_video:{vid[0]}:{user_id}"))
    kb.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"user_profile:{user_id}"))
    return kb

def withdrawals_list_kb(withdrawals: list, user_id: int):
    kb = InlineKeyboardMarkup(row_width=2)
    for wd in withdrawals:
        # wd = (id, amount, status, comment)
        if wd[2] == "pending":
            kb.row(
                InlineKeyboardButton(text=f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å {wd[0]}", callback_data=f"approve_wd:{wd[0]}:{user_id}"),
                InlineKeyboardButton(text=f"–û—Ç–∫–ª–æ–Ω–∏—Ç—å {wd[0]}", callback_data=f"reject_wd:{wd[0]}:{user_id}")
            )
    kb.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"user_profile:{user_id}"))
    return kb

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

@router.message(Command("admin"))
async def admin_panel(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    try:
        await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=main_admin_kb())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@router.callback_query(F.data == "admin_stats")
async def show_admin_stats(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            rows = await db.execute("""
                SELECT 
                (SELECT COUNT(*) FROM users) as users_count,
                (SELECT COUNT(*) FROM videos) as videos_count,
                (SELECT SUM(balance) FROM users) as total_balance
            """)
            result = await rows.fetchone()
            users_count, videos_count, total_balance = result

            await callback.message.edit_text(
                f"–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
                f"–í–∏–¥–µ–æ: {videos_count}\n"
                f"–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance or 0.0:.2f} —Ä—É–±",
                reply_markup=main_admin_kb()
            )
            await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

@router.callback_query(F.data == "admin_withdrawals")
async def show_withdrawals(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            rows = await db.execute("""
                SELECT id, user_id, amount, status 
                FROM withdrawals 
                ORDER BY id DESC 
                LIMIT 10
            """)
            rows = await rows.fetchall()

        if not rows:
            await callback.message.edit_text("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥.", reply_markup=main_admin_kb())
            await callback.answer()
            return

        text = "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥:</b>\n\n"
        for withdrawal_id, user_id, amount, status in rows:
            text += f"üîπ #{withdrawal_id} ‚Äî <code>{amount} —Ä—É–±</code> –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code> ‚Äî –°—Ç–∞—Ç—É—Å: <b>{status}</b>\n"

        await callback.message.edit_text(text, reply_markup=main_admin_kb())
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫.")

@router.callback_query(F.data == "admin_search_user")
async def admin_search_user_handler(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(AdminStates.waiting_user_id)
    await callback.answer()

@router.message(AdminStates.waiting_user_id)
async def process_user_id(message: types.Message, state: FSMContext):
    try:
        user_id_text = message.text.strip()
        if not user_id_text.isdigit():
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
        user_id = int(user_id_text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π
        if user_id <= 0:
            await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
            
        await show_user_profile(message, user_id)
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def show_user_profile(event, user_id: int):
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute("SELECT balance, banned FROM users WHERE user_id = ?", (user_id,))
            user = await cursor.fetchone()
            
            if not user:
                text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω."
                if isinstance(event, types.CallbackQuery):
                    await event.answer(text, show_alert=True)
                else:
                    await event.reply(text)
                return
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            balance, banned = user
            text = f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n"
            text += f"–ë–∞–ª–∞–Ω—Å: {balance}\n"
            text += f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {'–î–∞' if banned else '–ù–µ—Ç'}"
            
            if isinstance(event, types.CallbackQuery):
                await event.message.edit_text(text)
            else:
                await event.reply(text)
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        if isinstance(event, types.CallbackQuery):
            await event.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        else:
            await event.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

# –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_user_profile(user_id: int):
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor = await db.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
            user = await cursor.fetchone()
            
            if user:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ª–æ–≤–∞—Ä—å
                return dict(zip([desc[0] for desc in cursor.description], user))
            return None
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def show_user_profile(event, user_id: int):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await get_user_profile(user_id)
        
        if not user_data:
            text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω."
            if isinstance(event, types.CallbackQuery):
                await event.answer(text, show_alert=True)
            else:
                await event.reply(text)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute("SELECT COUNT(*) FROM videos WHERE user_id = ?", (user_id,))
            total_videos = (await cursor.fetchone())[0]
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        text = (
            f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}\n"
            f"–ë–∞–ª–∞–Ω—Å: {user_data.get('balance', 0)}\n"
            f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {'–î–∞' if user_data.get('banned', 0) else '–ù–µ—Ç'}\n"
            f"–í—Å–µ–≥–æ –≤–∏–¥–µ–æ: {total_videos}"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        kb = user_profile_kb(user_id, user_data.get('banned', 0))
        
        if isinstance(event, types.CallbackQuery):
            await event.message.edit_text(text, reply_markup=kb)
            await event.answer()
        else:
            await event.reply(text, reply_markup=kb)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await event.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(AdminStates.waiting_user_id)
async def process_user_id(message: types.Message, state: FSMContext):
    try:
        user_id_text = message.text.strip()
        if not user_id_text.isdigit():
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
        user_id = int(user_id_text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π
        if user_id <= 0:
            await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
        
        await show_user_profile(message, user_id)
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")


@router.callback_query(F.data.startswith("change_balance:"))
async def change_balance_start(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    user_id = int(callback.data.split(":")[1])
    await state.update_data(user_id=user_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:")
    await state.set_state(AdminStates.waiting_balance)
    await callback.answer()

@router.message(AdminStates.waiting_balance)
async def process_new_balance(message: types.Message, state: FSMContext):
    try:
        if not is_admin(message.from_user.id):
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            await state.clear()
            return
        
        data = await state.get_data()
        user_id = data.get("user_id")
        if not message.text.isdigit():
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
            return

        new_balance = int(message.text)
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute("UPDATE users SET balance = ? WHERE user_id = ?", (new_balance, user_id))
            await db.commit()
        await message.answer(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {new_balance}.")
        await show_user_profile(message, user_id)
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.")
@router.callback_query(F.data.startswith("send_message:"))
async def send_message_start(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    user_id = int(callback.data.split(":")[1])
    await state.update_data(user_id=user_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:")
    await state.set_state(AdminStates.waiting_message)
    await callback.answer()

@router.message(AdminStates.waiting_message)
async def process_send_message(message: types.Message, state: FSMContext):
    try:
        if not is_admin(message.from_user.id):
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            await state.clear()
            return
        
        data = await state.get_data()
        user_id = data.get("user_id")
        text = message.text
        
        try:
            await message.bot.send_message(user_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n{text}")
            await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

@router.callback_query(F.data.startswith("ban_user:"))
async def ban_user_handler(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        user_id = int(callback.data.split(":")[1])
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute("UPDATE users SET banned = 1 WHERE user_id = ?", (user_id,))
            await db.commit()
        await callback.message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ.")

@router.callback_query(F.data.startswith("unban_user:"))
async def unban_user_handler(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        user_id = int(callback.data.split(":")[1])
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute("UPDATE users SET banned = 0 WHERE user_id = ?", (user_id,))
            await db.commit()
        await callback.message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ.")

@router.callback_query(F.data.startswith("user_videos:"))
async def user_videos_handler(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        user_id = int(callback.data.split(":")[1])
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute("SELECT id, link, status FROM videos WHERE user_id = ?", (user_id,))
            videos = await cursor.fetchall()
        
        if not videos:
            await callback.message.answer("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤–∏–¥–µ–æ.")
            await callback.answer()
            return
        
        kb = videos_list_kb(videos, user_id)
        text = f"–í–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:"
        await callback.message.edit_text(text, reply_markup=kb)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–¥–µ–æ.")