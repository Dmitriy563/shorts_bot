from aiogram import Router, types
from db import DB_PATH
import aiosqlite
import logging

logger = logging.getLogger(__name__)

router = Router()

@router.message(lambda msg: msg.text == "üë§–ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: types.Message):
    user_id = message.from_user.id
    
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute("SELECT balance, earnings FROM users WHERE id=?", (user_id,))
            row = await cursor.fetchone()
            
            if row:
                balance, earnings = row
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                balance = 0.0
                earnings = 0.0
                
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                # await db.execute("INSERT INTO users (id, balance, earnings) VALUES (?, ?, ?)", (user_id, 0.0, 0.0))
                # await db.commit()
                
            await message.answer(
                f"–í–∞—à ID: {user_id}\n"
                f"–ë–∞–ª–∞–Ω—Å: {balance:.2f} ‚ÇΩ\n"
                f"–î–æ—Ö–æ–¥: {earnings:.2f} ‚ÇΩ",
                parse_mode="MarkdownV2"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è.")