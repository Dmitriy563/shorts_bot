from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import CPM_RATES, ADMIN_IDS
from db import DB_PATH
from handlers.admin_kb import admin_video_moderation_kb

import yt_dlp
import os
import aiosqlite
import datetime
import shutil
import re
import subprocess
import uuid
import asyncio

from PIL import Image
import pytesseract
from aiogram.types import FSInputFile

router = Router()

class UploadState(StatesGroup):
    awaiting_link = State()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def extract_frame_at_time(video_path: str, time_sec: float, frame_path: str):
    command = [
        "ffmpeg", "-ss", str(time_sec), "-i", video_path,
        "-frames:v", "1", "-q:v", "2", "-y", frame_path
    ]
    subprocess.run(command, check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def preprocess_image(image_path: str):
    image = Image.open(image_path).convert("L")
    return image.point(lambda x: 0 if x < 150 else 255, '1')
import cv2 
import numpy as np

def get_motion_mask(frame1, frame2, threshold=30):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å–∫—É –¥–≤–∏–∂—É—â–∏—Ö—Å—è –æ–±–ª–∞—Å—Ç–µ–π –º–µ–∂–¥—É –¥–≤—É–º—è –∫–∞–¥—Ä–∞–º–∏.
    :param frame1: –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä (BGR –∏–ª–∏ grayscale)
    :param frame2: –≤—Ç–æ—Ä–æ–π –∫–∞–¥—Ä —Ç–æ–≥–æ –∂–µ —Ä–∞–∑–º–µ—Ä–∞ –∏ —Ç–∏–ø–∞
    :param threshold: –ø–æ—Ä–æ–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
    :return: –º–∞—Å–∫–∞ (0/255) –¥–≤–∏–∂—É—â–∏—Ö—Å—è –æ–±–ª–∞—Å—Ç–µ–π
    """
    # –ï—Å–ª–∏ –∫–∞–¥—Ä—ã —Ü–≤–µ—Ç–Ω—ã–µ, –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –æ—Ç—Ç–µ–Ω–∫–∏ —Å–µ—Ä–æ–≥–æ
    if len(frame1.shape) == 3:
        gray1 = cv2.cvtColor(frame1, cv2.COLOR_BGR2GRAY)
        gray2 = cv2.cvtColor(frame2, cv2.COLOR_BGR2GRAY)
    else:
        gray1 = frame1
        gray2 = frame2

    # –í—ã—á–∏—Å–ª—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—É—é —Ä–∞–∑–Ω–∏—Ü—É
    diff = cv2.absdiff(gray1, gray2)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ—Ä–æ–≥, —á—Ç–æ–±—ã –≤—ã–¥–µ–ª–∏—Ç—å –∑–Ω–∞—á–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    _, motion_mask = cv2.threshold(diff, threshold, 255, cv2.THRESH_BINARY)

    # –ú–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —à—É–º–∞
    kernel = np.ones((3, 3), np.uint8)
    motion_mask = cv2.morphologyEx(motion_mask, cv2.MORPH_OPEN, kernel)

    return motion_mask
def ocr_from_image(frame_path: str) -> str:
    image = preprocess_image(frame_path)
    return pytesseract.image_to_string(image, lang='rus+eng')

def fuzzy_check_ad(text: str) -> bool:
    keywords = [
        "–†–ï–ö–õ–ê–ú–ê", "DRAGON MONEY", "DRAGONMONEY", "–î–†–ê–ì–û–ù –ú–ê–ù–ò", "DRAGON", "CASINO", "MONEY", "–ø—Ä–æ—Ñ–∏–ª—è", "–ü–†–û–§–ò–õ–Ø", "–≤ –æ–ø–∏—Å–∞–Ω–∏–∏", "–¥–µ–ø–æ–∑–∏—Ç", "–¥–µ–ø–æ–∑–∏—Ç—É", "–î–ï–ü–û–ó–ò–¢", "–î–ï–ü–û–ó–ò–¢–£",
        "–ü–û–î–ê–†–û–ö", "–ë–û–ù–£–°", "–ü–†–û–ú–û–ö–û–î", "1XBET", "XBET", "RIOBET", "–í–£–õ–ö–ê–ù", "–í—É–ª–∫–∞–Ω", "–≤—É–ª–∫–∞–Ω","–ü–†–û–ú–û–ö–û–î–£"
    ]
    text = text.upper()
    return any(keyword in text for keyword in keywords)

def cleanup_files(paths: list):
    for path in paths:
        if os.path.exists(path):
            if os.path.isdir(path):
                shutil.rmtree(path, ignore_errors=True)
            else:
                os.remove(path)

async def check_ad_with_timeout(video_path: str, temp_dir: str, timeout_sec: int = 15) -> str:
    loop = asyncio.get_event_loop()
    def blocking_check():
        os.makedirs(temp_dir, exist_ok=True)
        for t in [round(x * 0.15, 1) for x in range(0, 100)]:
            frame_path = os.path.join(temp_dir, f"frame_{t}.jpg")
            extract_frame_at_time(video_path, t, frame_path)
            text = ocr_from_image(frame_path)
            print(f"[OCR {t} —Å–µ–∫]: {repr(text)}")
            if fuzzy_check_ad(text):
                return "found"
        return "not_found"

    try:
        result = await asyncio.wait_for(loop.run_in_executor(None, blocking_check), timeout=timeout_sec)
    except asyncio.TimeoutError:
        result = "moderation"

    cleanup_files([temp_dir])
    return result

async def save_video_to_db(user_id: int, video_id: str, link: str, status: str):
    cpm = CPM_RATES.get('shorts', 0) if status == "found" else 0
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('''
            INSERT INTO videos (user_id, video_id, link, status, cpm, platform, added_at)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (
            user_id, video_id, link, status,
            cpm, 'shorts', datetime.datetime.now().isoformat()
        ))
        await db.commit()

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---

@router.message(F.text == "üì•–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ")
async def ask_video_link(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à–µ –≤–∏–¥–µ–æ (YouTube Shorts).")
    await state.set_state(UploadState.awaiting_link)

@router.message(UploadState.awaiting_link)
async def process_link(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    link = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω –∏ –ª–∏–º–∏—Ç –∑–∞–≥—Ä—É–∑–æ–∫
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT banned FROM users WHERE id = ?", (user_id,))
        row = await cursor.fetchone()
        if row and row[0] == 1:
            await message.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –≤–∏–¥–µ–æ.")
            await state.clear()
            return

        today = datetime.datetime.now().date().isoformat()
        cursor = await db.execute("""SELECT COUNT(*) FROM videos
            WHERE user_id = ? AND substr(added_at,1,10) = ?
        """, (user_id, today))
        count = (await cursor.fetchone())[0]

    if count >= 100:
        await message.answer("–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –≤ 100 –≤–∏–¥–µ–æ –Ω–∞ –¥–µ–Ω—å.")
        await state.clear()
        return

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –≤–∏–¥–µ–æ
    match = re.search(r'(?:v=|\/shorts\/|\/watch\?v=|youtu\.be\/)([a-zA-Z0-9_-]{11})', link)
    if not match:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –≤–∏–¥–µ–æ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞.")
        await state.clear()
        return
    video_id = match.group(1)

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—É—Ç–µ–π
    os.makedirs("downloads", exist_ok=True)
    video_path = os.path.abspath(f"downloads/{video_id}.mp4")
    temp_dir = os.path.abspath(f"downloads/temp_{uuid.uuid4().hex}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ ffmpeg
    ffmpeg_path = shutil.which("ffmpeg")
    if not ffmpeg_path:
        await message.answer("ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ PATH.")
        await state.clear()
        return

    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
    ydl_opts = {
        'outtmpl': video_path,
        'format': 'mp4/best',
        'quiet': True,
        'no_warnings': True,
        'ffmpeg_location': ffmpeg_path
    }
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([link])
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ: {e}")
        await state.clear()
        return

    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∫–ª–∞–º—ã
    try:
        status = await check_ad_with_timeout(video_path, temp_dir, timeout_sec=15)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–∏–¥–µ–æ: {e}")
        cleanup_files([video_path])
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    await save_video_to_db(user_id, video_id, link, status)
    await state.clear()

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if status == "found":
        await message.answer("‚úÖ –í–∏–¥–µ–æ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—é.")
    elif status == "moderation":
        await message.answer("‚ö†Ô∏è –í–∏–¥–µ–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —è–≤–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
    else:
        await message.answer("‚ùå –í–∏–¥–µ–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏. –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    for admin_id in ADMIN_IDS:
        try:
            if status == "moderation":
                video_file = FSInputFile(video_path)
                await message.bot.send_video(
                chat_id=admin_id,
                video=video_file,
                caption=(
                    f"‚ùó –í–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [{message.from_user.full_name}](tg://user?id={user_id}) "
                    f"—Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏.\n–°—Å—ã–ª–∫–∞: {link}"
                ),
                reply_markup=admin_video_moderation_kb(video_id),
                parse_mode="Markdown"
            )
            else:
                await message.bot.send_message(
                chat_id=admin_id,
                text=(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{message.from_user.full_name}](tg://user?id={user_id}) –∑–∞–≥—Ä—É–∑–∏–ª –≤–∏–¥–µ–æ: {link}\n"
                    f"–°—Ç–∞—Ç—É—Å: `{status}`"
                ),
                parse_mode="Markdown"
            )
        except Exception as e:
         print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∞–º: {e}")

# –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
